
function  dQn(sma, e, inc, ape, ran, tru, alpha, beta, ps::qLawParams)
    # Set some constants
    b_petro = 0.01
    m_petro = 3
    n_petro = 4
    r_petro = 2

    # Grab parameters
    sma_t   = ps.oet[1]
    e_t     = ps.oet[2]
    inc_t   = ps.oet[3]
    ran_t   = ps.oet[4]
    ape_t   = ps.oet[5]
    Wsma    = ps.oeW[1]
    We      = ps.oeW[2]
    Winc    = ps.oeW[3]
    Wran    = ps.oeW[4]
    Wape    = ps.oeW[5]
    Wp      = ps.Wp
    f       = ps.tMax
	mu 		= ps.Î¼
    rpermin = ps.rpmin
    k_petro = ps.k

    # Start of generated code
    t2 = cos(ape);
    t3 = cos(beta);
    t4 = cos(inc);
    t5 = fabs(m_petro);
    t6 = fabs(sma_t);
    t7 = sin(ape);
    t8 = cos(tru);
    t9 = sin(inc);
    t10 = sin(tru);
    t13 = ape+tru;
    t17 = b_petro+1.0;
    t18 = e*2.0;
    t19 = e+1.0;
    t20 = e*e;
    t21 = e_t*2.0;
    t22 = sma*2.0;
    t23 = sma_t*2.0;
    t24 = sma*sma;
    t31 = -ape_t;
    t32 = e-1.0;
    t33 = 1.0/e;
    t40 = -e_t;
    t42 = 1.0/(f*f);
    t43 = -inc_t;
    t44 = n_petro-1.0;
    t45 = -ran_t;
    t46 = 1.0/r_petro;
    t47 = 1.0/rpermin;
    t48 = -sma_t;
    t50 = 1.0/sma;
    t57 = e*sma*-2.0;
    t11 = fabs(t2);
    t12 = fabs(t4);
    t14 = fabs(t7);

    #t15 = (t2/fabs(t2));
    #t16 = (t7/fabs(t7));
    t15 = t2 > 0.0 ? 1.0 : -1.0
    t16 = t7 > 0.0 ? 1.0 : -1.0

    t25 = t2*t2;
    t26 = t7*t7;
    t27 = sma*t18;
    t28 = t9*t9;
    t29 = e*t8;
    t30 = sin(t13);
    t34 = 1.0/t20;
    t35 = t33*t33*t33;
    t37 = t33*t33*t33*t33*t33;
    t39 = t33*t33*t33*t33*t33*t33*t33;
    t41 = -t21;
    t49 = -t23;
    t51 = 1.0/t24;
    t52 = t50*t50*t50;
    t54 = t17*t17;
    t55 = 1.0/t5;
    t56 = 1.0/t6;
    t58 = 1.0/t9;
    t61 = -t20;
    t62 = 1.0/t19;
    t63 = t20-1.0;

    #t65 = ape+t31;
    #t65 = ape - ape_t;
	if (mod(ape, 2.0*pi) > mod(ps.oet[5], 2.0*pi))
		t65 = mod(ape - ps.oet[5], 2.0*pi) >  1.0e-6 ? mod(ape - ps.oet[5], 2.0*pi) : 1.0e-6;
	else
		t65 = mod(ape - ps.oet[5], 2.0*pi) < -1.0e-6 ? mod(ape - ps.oet[5], 2.0*pi) : -1.0e-6;
	end

    t66 = e+t40;
    t67 = inc+t43;

    #t68 = ran+t45;
    #t68 = ran - ran_t
	if (mod(ran, 2.0*pi) > mod(ps.oet[4], 2.0*pi))
		t68 = mod(ran - ps.oet[4], 2.0*pi) >  1.0e-6 ? mod(ran - ps.oet[4], 2.0*pi) :  1.0e-6;
	else
		t68 = mod(ran - ps.oet[4], 2.0*pi) < -1.0e-6 ? mod(ran - ps.oet[4], 2.0*pi) : -1.0e-6;
	end

    t69 = sma+t48;
    t74 = -t33;
    t76 = t46-1.0;
    t101 = sma*t32*t47;
    t36 = t34*t34;
    t38 = t34*t34*t34;
    t53 = t51*t51;
    t59 = e*t11;
    t60 = e*t14;
    t64 = t62*t62;
    t70 = t29+1.0;
    t71 = cos(t68);
    t72 = fabs(t69);

    #t73 = (t69/fabs(t69));
    t73 = t69 > 0.0 ? 1.0 : -1.0

    t75 = -t34;
    t77 = e*t7*t15;
    t78 = e*t2*t16;
    t79 = cos(t65);
    t81 = sin(t65);
    t83 = t22+t49;
    t84 = t69*t69;
    t86 = t20*t25;
    t87 = t20*t26;
    t89 = t63*t63;
    t90 = t18+t41;
    t91 = t66*t66;
    t92 = t67*t67;
    t93 = sma*t63;
    t97 = 1.0/t63;
    t99 = t25*t61;
    t100 = t26*t61;
    t104 = t37*t63;
    t109 = t101+1.0;
    t111 = (t35*t63)/2.0;
    t80 = -t59;
    t82 = -t60;
    t85 = acos(t79);
    t88 = acos(t71);
    t94 = t79*t79;
    t95 = 1.0/t70;
    t96 = mu*t93;
    t98 = 1.0/t89;
    t107 = t99+1.0;
    t108 = t100+1.0;
    t112 = t36*t63*(3.0/2.0);
    t113 = k_petro*t109;
    t114 = -t111;
    t119 = (t38*t89)/4.0;
    t120 = t39*t89*(3.0/2.0);
    t128 = t55*t56*t72;
    t155 = (We*mu*t42*t50*t90*t97)/4.0;
    t156 = (We*mu*t42*t50*t91*t97)/4.0;
    t157 = (We*mu*t42*t51*t91*t97)/4.0;
    t102 = t85*t85;
    t103 = t88*t88;
    t105 = -t96;
    t106 = -t94;
    t115 = -t112;
    t116 = exp(t113);
    t117 = sqrt(t107);
    t118 = sqrt(t108);
    t125 = t93*t95;
    t126 = -t120;
    t131 = pow(t128,n_petro);
    t132 = t119+1.0/2.7E+1;
    t136 = pow(t128,t44);
    t158 = -t155;
    t159 = (We*e*mu*t42*t50*t91*t98)/2.0;
    t110 = t106+1.0;
    t121 = 1.0/sqrt(t105);
    t123 = 1.0/t117;
    t124 = 1.0/t118;
    t127 = Wp*t116;
    t133 = t131+1.0;
    t137 = t82+t117;
    t138 = t80+t118;
    t139 = sqrt(t132);
    t143 = t93+t125;
    t144 = pow(t60-t117,2.0);
    t145 = pow(t59-t118,2.0);
    t149 = -1.0/(t60-t117);
    t153 = t104+t126;
    t122 = t121*t121*t121;
    t129 = t127+1.0;
    t130 = 1.0/sqrt(t110);
    t134 = e*t26*t124;
    t135 = e*t25*t123;
    t140 = t2*t7*t20*t123;
    t141 = t2*t7*t20*t124;
    t142 = 1.0/t139;
    t146 = pow(t133,t46);
    t150 = 1.0/t144;
    t151 = t2*t7*t61*t123;
    t152 = t2*t7*t61*t124;
    t154 = pow(t133,t76);
    t162 = t111+t139;
    t163 = t114+t139;
    t170 = Winc*mu*t42*t50*t92*t97*t145;
    t171 = Winc*mu*t42*t51*t92*t97*t145;
    t174 = Winc*mu*t18*t42*t50*t92*t98*t145;
    t175 = (b_petro*e*f*sma*t12*t58*t121*-2.0)/(t60-t117);
    t181 = Wran*mu*t28*t42*t50*t97*t103*t144;
    t182 = Wran*mu*t28*t42*t51*t97*t103*t144;
    t183 = b_petro*f*t12*t58*t63*t121*t149;
    t185 = b_petro*f*t12*t58*t93*t121*t149;
    t186 = (b_petro*f*t12*t58*t63*t121)/(t60-t117);
    t187 = Wran*mu*t18*t28*t42*t50*t98*t103*t144;
    t188 = (b_petro*f*t12*t58*t93*t121)/(t60-t117);
    t147 = t14+t135;
    t148 = t11+t134;
    t160 = t77+t152;
    t161 = t78+t151;
    t164 = pow(t162,1.0/3.0);
    t165 = pow(t163,1.0/3.0);
    t172 = (Wsma*mu*t42*t52*t62*t84*t146)/4.0;
    t176 = (t142*t153)/2.0;
    t177 = (Wsma*mu*t32*t42*t52*t62*t83*t146)/4.0;
    t179 = (Wsma*mu*t32*t42*t52*t64*t84*t146)/4.0;
    t180 = Wsma*mu*t32*t42*t53*t62*t84*t146*(3.0/4.0);
    t189 = b_petro*e*f*mu*t12*t24*t58*t63*t122*t149;
    t190 = (b_petro*f*mu*sma*t12*t58*t89*t122*(-1.0/2.0))/(t60-t117);
    t191 = (b_petro*f*mu*sma*t12*t58*t89*t122)/(t60*2.0-t117*2.0);
    t207 = (Wsma*mu*n_petro*t32*t42*t46*t52*t55*t56*t62*t73*t84*t136*t154)/4.0;
    t166 = 1.0/(t164*t164);
    t167 = 1.0/(t165*t165);
    t168 = -t164;
    t169 = -t165;
    t173 = -t172;
    t178 = t32*t172;
    t184 = -t177;
    t192 = t34+t115+t176;
    t193 = Winc*mu*t42*t50*t92*t97*t148*(t59-t118)*-2.0;
    t194 = t75+t112+t176;
    t195 = Wran*mu*t28*t42*t50*t97*t103*t147*(t60-t117)*-2.0;
    t196 = b_petro*f*t12*t58*t93*t121*t147*t150;
    t197 = Winc*mu*t42*t50*t92*t97*t160*(t59-t118)*-2.0;
    t198 = Winc*mu*t42*t50*t92*t97*t160*(t59-t118)*2.0;
    t199 = Wran*mu*t28*t42*t50*t97*t103*t161*(t60-t117)*-2.0;
    t208 = -t207;
    t200 = t33+t164+t169;
    t219 = (t166*t192)/3.0;
    t221 = (t167*t194)/3.0;
    t201 = e*t200;
    t202 = t200*t200;
    t220 = -t219;
    t203 = t202-1.0;
    t204 = t201-1.0;
    t210 = t22*t89*t202;
    t211 = t24*t89*t202;
    t212 = t24*t63*t200*t201*4.0;
    t224 = t34+t220+t221;
    t205 = 1.0/t204;
    t225 = e*t224;
    t235 = sma*t22*t89*t200*t224;
    t236 = t24*t89*t200*t224*-2.0;
    t206 = t205*t205;
    t209 = t27*t205;
    t213 = t63*t205;
    t214 = t93*t205;
    t230 = t74+t165+t168+t225;
    t215 = -t214;
    t216 = t61+t213+1.0;
    t245 = -t93*t206*(t200-t225);
    t217 = t93+t215;
    t248 = t57+t209+t245;
    t218 = t217*t217;
    t229 = t203*t216*t217*2.0;
    t254 = t203*t217*(-t209+e*sma*2.0+t93*t206*(t200-t225))*-2.0;
    t222 = t203*t218;
    t243 = t210+t229;
    t246 = t200*t218*t224*2.0;
    t223 = -t222;
    t260 = t212+t236+t246+t254;
    t226 = t211+t223;
    t227 = sqrt(t226);
    t228 = 1.0/t227;
    t231 = f*mu*sma*t122*t227;
    t232 = f*t33*t121*t227;
    t233 = f*t34*t121*t227;
    t237 = (f*mu*t33*t63*t122*t227)/2.0;
    t234 = -t231;
    t238 = t188+t232;
    t255 = (f*t33*t121*t228*t243)/2.0;
    t262 = (f*t33*t121*t228*t260)/2.0;
    t239 = 1.0/(t238*t238);
    t240 = 1.0/(t238*t238*t238);
    t257 = t186+t191+t237+t255;
    t263 = -t262;
    t241 = Wape*t54*t102*t239;
    t244 = Wape*t54*t81*t85*t130*t239*2.0;
    t247 = Wape*b_petro*f*t12*t22*t54*t58*t63*t102*t121*t150*t161*t240;
    t258 = Wape*t54*t102*t240*t257*2.0;
    t266 = t175+t189+t196+t233+t234+t263;
    t267 = Wape*t54*t102*t240*(t189+t196+t233+t234+t263+b_petro*f*t12*t27*t58*t121*t149)*2.0;
    t242 = -t241;
    t256 = t198+t199+t244+t247;
    t259 = -t258;
    t268 = t158+t159+t173+t174+t179+t187+t193+t195+t267;
    t269 = t129*(t158+t159+t173+t179+t193+t195+t267+Winc*e*mu*t42*t50*t92*t98*t145*2.0+Wran*e*mu*t28*t42*t50*t98*t103*t144*2.0);
    t249 = t156+t170+t178+t181+t242;
    t261 = t157+t171+t180+t182+t184+t208+t259;
    t250 = k_petro*sma*t47*t127*t249;
    t252 = k_petro*t32*t47*t127*t249;
    t264 = t129*t261;
    t251 = -t250;
    t253 = -t252;

    val = sin(beta)*(t121*t125*t129*cos(t13)*(Wape*t54*t102*t240*((b_petro*f*t93*t121*((t4/fabs(t4))))/(t60-t117)+(b_petro*f*t4*t12*t93*t121)/(t28*(t60-t117)))*-2.0+Winc*mu*t42*t50*t97*t145*(inc*2.0-inc_t*2.0)+Wran*mu*t4*t9*t42*t50*t97*t103*t144*2.0)+t4*t30*t58*t121*t125*t129*t256+Wran*mu*t9*t30*t42*t88*t95*t121*t129*t144*sin(t68)*1.0/sqrt(-t71*t71+1.0)*2.0)+t3*cos(alpha)*(t10*t93*t121*(t250-t269)-t10*t18*t24*t121*(t252-t264)+t8*t33*t93*t121*t129*t256)-t3*sin(alpha)*(-t121*(t250-t269)*(e*t125+t8*t143)+sma*t22*t70*t121*(t252-t264)+t10*t33*t121*t129*t143*t256);
    return val
end